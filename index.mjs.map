{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a Planck distribution.\n*\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {PositiveNumber} differential entropy\n*\n* @example\n* var v = entropy( 0.1 );\n* // returns ~3.3030\n*\n* @example\n* var v = entropy( 1.5 );\n* // returns ~0.6833\n*\n* @example\n* var v = entropy( 2.9 );\n* // returns ~0.2255\n*\n* @example\n* var v = entropy( -1.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( lambda ) {\n\tvar c;\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tc = -expm1( -lambda );\n\treturn ( lambda * exp( -lambda ) / c ) - ln( c );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n"],"names":["entropy","lambda","c","isnan","NaN","expm1","exp","ln"],"mappings":";;mYAwDA,SAASA,EAASC,GACjB,IAAIC,EACJ,OAAKC,EAAOF,IAAYA,GAAU,EAC1BG,KAERF,GAAKG,GAAQJ,GACJA,EAASK,GAAML,GAAWC,EAAMK,EAAIL,GAC9C"}